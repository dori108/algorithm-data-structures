n개의 정점을 갖는 이진 트리의 정점에 1부터 n까지의 번호가 중복 없이 매겨져 있다. 
이와 같은 이진 트리의 인오더와 포스트오더가 주어졌을 때, 프리오더를 구하는 프로그램을 작성하시오.


이 문제는 이진 트리의 트래버설 순서를 이용하여 트리를 재구성하는 문제
주어진 인오더(in-order)와 포스트오더(post-order)를 통해 프리오더(pre-order)를 구하는 문제

이진 트리의 트래버설 순서에 대한 기본 지식:

프리오더(pre-order): 루트 -> 왼쪽 서브트리 -> 오른쪽 서브트리
인오더(in-order): 왼쪽 서브트리 -> 루트 -> 오른쪽 서브트리
포스트오더(post-order): 왼쪽 서브트리 -> 오른쪽 서브트리 -> 루트
문제를 해결하기 위해서 다음과 같은 단계로 접근할 수 있습니다:

포스트오더의 마지막 요소는 항상 루트 노드입니다.
인오더에서 해당 루트 노드를 기준으로 왼쪽 서브트리와 오른쪽 서브트리로 분할할 수 있습니다.
재귀적으로 서브트리를 처리하여 프리오더를 출력합니다.

import sys
sys.setrecursionlimit(200000)

def build_preorder(in_start, in_end, post_start, post_end):
    if in_start > in_end or post_start > post_end:
        return
    
    root = postorder[post_end]
    preorder.append(root)
    
    root_index = inorder_index[root]
    
    left_size = root_index - in_start
    
    build_preorder(in_start, root_index - 1, post_start, post_start + left_size - 1)
    build_preorder(root_index + 1, in_end, post_start + left_size, post_end - 1)

input_data = sys.stdin.read().split('\n')

n = int(input_data[0])
inorder = list(map(int, input_data[1].split()))
postorder = list(map(int, input_data[2].split()))

inorder_index = {value: idx for idx, value in enumerate(inorder)}

preorder = []
build_preorder(0, n - 1, 0, n - 1)

print(' '.join(map(str, preorder)))

인덱스 매핑: inorder_index 딕셔너리는 인오더 배열에서 값에 대한 인덱스를 저장합니다. 이를 통해 각 값의 위치를 빠르게 찾을 수 있습니다.
재귀 함수 정의: build_preorder 함수는 주어진 범위 내에서 프리오더 순서를 구성합니다.
루트 결정: 포스트오더 배열의 마지막 요소는 현재 서브트리의 루트입니다.
분할 정복: 인오더 배열에서 루트 노드를 기준으로 왼쪽 서브트리와 오른쪽 서브트리로 나눕니다.
재귀 호출: 왼쪽 서브트리와 오른쪽 서브트리를 재귀적으로 처리합니다.
프리오더 출력: 최종적으로 구성된 프리오더 배열을 출력합니다.
