시험범위
선배님들 피드백

n = int(input())
tree = {}
for _ in range(n):
    node, left, right = input().split()
    tree[node] = (left, right)

#(Preorder Traversal)
def preorder(node):
    if node == '.':
        return ""
    left, right = tree[node]
    return node + preorder(left) + preorder(right)

#(Inorder Traversal)
def inorder(node):
    if node == '.':
        return ""
    left, right = tree[node]
    return inorder(left) + node + inorder(right)

#(Postorder Traversal)
def postorder(node):
    if node == '.':
        return ""
    left, right = tree[node]
    return postorder(left) + postorder(right) + node

root = 'A'
print(preorder(root))
print(inorder(root))
print(postorder(root))


dlwlsxmfl
qnahrk wktlr shemfmf chd 2roTlr rkwsmsek
왼쪽 오른쪽 두개

세 가지 중에
프리+인
포스트+인

이렇게 주어지는 경우에만 원래 트리가 복원 가능하다

프리+포스트 = 복원 불가능

왜냐하면?
프리 : 루트 노드를 확실히 알 수 있음
포스트 : 루트 노드를 확실히 알 수 있음
프리는 root 젤 먼저
포스트는 root 젤 끝
인은 root 중간에 위치해 항상
> 왼쪽 오른쪽을 구분할 수 있음


출력 방식은 세 가지가 있음
호구 조사하러 찾아다니는 중 > 어느집 먼저 찾아갈까?

1. 프리오더 : 부모노드 먼저 이후에 왼>오 순서대로 찾아가는 방식
계속 재귀함수로 끝날 때까지 찾는다.
왼쪽 자식노드가 없으면 부모 노드로 올라가서 오른쪽으로 간다.

2. 인오더 : 왼쪽노드 먼저 > 미들노드(부모 노드) > 오른쪽 마지막
중앙에는 원래 root가 하나 존재하는데 거기서부터 시작해서 왼쪽 끝까지 내려간다 자식 노드가 없을 때 까지
본인 찍고 내려갈 곳이 없으면 오른쪽으로감 
가서 왼쪽으로 또 계속 내려가는데 더이상 내려갈 곳이 없으면 다시 오른쪽 
> 반복
*중요한 것은 root를 제일 먼저 찍는 것이 아니다
나중에 올라가면서 만나면 중간에서 root를 찍는다

**자기의 왼쪽 자식을 다 찍기 전까지는 본인을 찍지 않는다

3. 포스트 오더 : 왼 > 오 > 부모 순서로 찍는다
왼쪽 노드타고 쭉 내려간다
올라가는데 부모노드 안찍음
오른쪽 서브트리 봐서 확인 > 왼쪽 있으면 또 내려감 
없으면 오른쪽 봄
더 내려갈 곳이 없으면 이제 부모 노드를 찍는다
