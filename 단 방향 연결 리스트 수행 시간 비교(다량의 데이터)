import random
import time

data = [random.randint(1, 1000) for _ in range(1000)]# 1000개의 랜덤 숫자 생성

def insertion_sort(arr):# 삽입 정렬 수행
    for i in range(1, len(arr)):
        key = arr[i]
        j = i - 1
        while j >= 0 and key < arr[j]:
            arr[j + 1] = arr[j]
            j -= 1
        arr[j + 1] = key
    return arr

def merge_sort(arr):# 병합 정렬 수행
    if len(arr) > 1:
        mid = len(arr) // 2
        left = arr[:mid]
        right = arr[mid:]
        merge_sort(left)
        merge_sort(right)
        i = j = k = 0
        while i < len(left) and j < len(right):
            if left[i] < right[j]:
                arr[k] = left[i]
                i += 1
            else:
                arr[k] = right[j]
                j += 1
            k += 1
        while i < len(left):
            arr[k] = left[i]
            i += 1
            k += 1
        while j < len(right):
            arr[k] = right[j]
            j += 1
            k += 1
    return arr

def quick_sort(arr):# 퀵 정렬 수행
    if len(arr) <= 1:
        return arr
    pivot = arr[len(arr) // 2]
    left = [x for x in arr if x < pivot]
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    return quick_sort(left) + middle + quick_sort(right)

data_copy = data.copy()# 원본 데이터 복제

start_time = time.time()# 각 정렬 알고리즘 수행 시간 측정
insertion_sort(data_copy.copy())
print(f"Insertion Sort: {time.time() - start_time:.6f} seconds")

start_time = time.time()
merge_sort(data_copy.copy())
print(f"Merge Sort: {time.time() - start_time:.6f} seconds")

start_time = time.time()
quick_sort(data_copy.copy())
print(f"Quick Sort: {time.time() - start_time:.6f} seconds")
